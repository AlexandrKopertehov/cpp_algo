#include <iostream>
#include <vector>

void InputData(std::vector<int64_t>& sculptures, const uint64_t& n) {
  for (uint64_t i = 1; i < n; ++i) {
    std::cin >> sculptures[i];
  }
}

void BuildPrefSum(const std::vector<int64_t>& sculptures, const uint64_t& n, std::vector<int64_t>& pref_sum) {
  pref_sum[1] = sculptures[1];
  for (uint64_t i = 2; i < n; ++i) {
    pref_sum[i] = pref_sum[i - 1] + sculptures[i];
  }
}

void FindSegmentWithMaxSum(const std::vector<int64_t>& pref_sum, const uint64_t& n) {
  std::vector<int64_t> min_sum_less_r(n);
  min_sum_less_r[0] = 0;
  int64_t max_sum = pref_sum[1];
  uint64_t max_l = 1;
  uint64_t max_r = 1;
  uint64_t min_l = 0;
  for (uint64_t r = 1; r < n; ++r) {
    min_sum_less_r[r] = min_sum_less_r[r - 1];
    if (max_sum < pref_sum[r] - min_sum_less_r[r]) {
      max_l = min_l + 1;
      max_r = r;
      max_sum = pref_sum[r] - min_sum_less_r[r];
    }
    if (min_sum_less_r[r] > pref_sum[r]) {
      min_l = r;
      min_sum_less_r[r] = pref_sum[r];
    }
  }
  std::cout << max_l << " " << max_r << " " << max_sum << "\n";
}

int main() {
  uint64_t n = 0;
  std::cin >> n;
  std::vector<int64_t> sculptures(n + 1);
  InputData(sculptures, n + 1);
  std::vector<int64_t> pref_sum(n + 1);
  BuildPrefSum(sculptures, n + 1, pref_sum);
  FindSegmentWithMaxSum(pref_sum, n + 1);
  return 0;
}