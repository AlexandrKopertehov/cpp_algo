#include <cmath>
#include <iostream>
#include <vector>

void InputData(std::vector<std::vector<int32_t>>& sculptures, const int32_t& n, const int32_t& m) {
  for (int32_t i = 0; i < n; ++i) {
    sculptures[i].resize(m);
    for (int32_t j = 0; j < m; ++j) {
      std::cin >> sculptures[i][j];
    }
  }
}

void BuildSparseTable(const int32_t& n, const int32_t& m, const std::vector<std::vector<int32_t>>& smeshariki,
                      std::vector<std::vector<std::vector<std::vector<int32_t>>>>& st) {
  auto max_k_1 = static_cast<int32_t>(std::floor(std::log2(n)));
  auto max_k_2 = static_cast<int32_t>(std::floor(std::log2(m)));

  for (int32_t i = 0; i < n; ++i) {
    st[i].resize(m);
    for (int32_t j = 0; j < m; ++j) {
      st[i][j].resize(max_k_1 + 1);
      for (int32_t k = 0; k < max_k_1 + 1; ++k) {
        st[i][j][k].resize(max_k_2 + 1, INT32_MAX);
      }
    }
  }

  for (int32_t i = 0; i < n; ++i) {
    for (int32_t j = 0; j < m; ++j) {
      st[i][j][0][0] = smeshariki[i][j];
    }
  }

  for (int32_t i = 0; i < n; ++i) {
    for (int32_t k_2 = 1; k_2 <= max_k_2; ++k_2) {
      for (int32_t j = 0; j <= m - (1 << k_2); ++j) {
        st[i][j][0][k_2] = std::min(st[i][j][0][k_2 - 1], st[i][j + (1 << (k_2 - 1))][0][k_2 - 1]);
      }
    }
  }

  for (int32_t k_1 = 1; k_1 <= max_k_1; ++k_1) {
    for (int32_t i = 0; i <= n - (1 << k_1); ++i) {
      for (int32_t k_2 = 0; k_2 <= max_k_2; ++k_2) {
        for (int32_t j = 0; j <= m - (1 << k_2); ++j) {
          st[i][j][k_1][k_2] = std::min(st[i][j][k_1 - 1][k_2], st[i + (1 << (k_1 - 1))][j][k_1 - 1][k_2]);
        }
      }
    }
  }
}

void ProcessingRequests(const std::vector<std::vector<std::vector<std::vector<int32_t>>>>& st, const int32_t& q) {
  for (int32_t i = 0; i < q; ++i) {
    uint32_t x_1 = 0;
    uint32_t y_1 = 0;
    uint32_t x_2 = 0;
    uint32_t y_2 = 0;
    std::cin >> x_1 >> y_1 >> x_2 >> y_2;
    --x_1;
    --y_1;
    --x_2;
    --y_2;
    auto k_1 = static_cast<int32_t>(std::floor(std::log2(x_2 - x_1 + 1)));
    auto k_2 = static_cast<int32_t>(std::floor(std::log2(y_2 - y_1 + 1)));
    std::cout << std::min(std::min(st[x_1][y_1][k_1][k_2], st[x_2 - (1 << k_1) + 1][y_1][k_1][k_2]),
                          std::min(st[x_1][y_2 - (1 << k_2) + 1][k_1][k_2],
                                   st[x_2 - (1 << k_1) + 1][y_2 - (1 << k_2) + 1][k_1][k_2]))
              << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  int32_t n = 0;
  int32_t m = 0;
  std::cin >> n >> m;
  std::vector<std::vector<int32_t>> smeshariki(n);
  InputData(smeshariki, n, m);
  std::vector<std::vector<std::vector<std::vector<int32_t>>>> st(n);
  BuildSparseTable(n, m, smeshariki, st);
  int32_t q = 0;
  std::cin >> q;
  ProcessingRequests(st, q);
  return 0;
}