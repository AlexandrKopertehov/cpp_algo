#include <iostream>
#include <vector>

void Update(const int32_t& x, const int32_t& y, const int32_t& z, std::vector<std::vector<std::vector<int32_t>>>& ft,
            const int32_t& delta, const int32_t& n) {
  for (int32_t i = x; i < n; i = i | (i + 1)) {
    for (int32_t j = y; j < n; j = j | (j + 1)) {
      for (int32_t k = z; k < n; k = k | (k + 1)) {
        ft[i][j][k] += delta;
      }
    }
  }
}

int32_t Query(const int32_t& x, const int32_t& y, const int32_t& z,
              std::vector<std::vector<std::vector<int32_t>>>& ft) {
  int32_t sum = 0;
  for (int32_t i = x; i >= 1; i = (i & (i + 1)) - 1) {
    for (int32_t j = y; j >= 1; j = (j & (j + 1)) - 1) {
      for (int32_t k = z; k >= 1; k = (k & (k + 1)) - 1) {
        sum += ft[i][j][k];
      }
    }
  }
  return sum;
}

int32_t QuerySubCube(const int32_t& x1, const int32_t& x2, const int32_t& y1, const int32_t& y2, const int32_t& z1,
                     const int32_t& z2, std::vector<std::vector<std::vector<int32_t>>>& ft) {
  return Query(x2, y2, z2, ft) - Query(x2, y1 - 1, z2, ft) - Query(x1 - 1, y2, z2, ft) - Query(x2, y2, z1 - 1, ft) +
         Query(x1 - 1, y1 - 1, z2, ft) + Query(x2, y1 - 1, z1 - 1, ft) + Query(x1 - 1, y2, z1 - 1, ft) -
         Query(x1 - 1, y1 - 1, z1 - 1, ft);
}

void BuildFenwickTree(const int32_t& n, std::vector<std::vector<std::vector<int32_t>>>& ft) {
  for (int32_t i = 0; i < n; ++i) {
    ft[i] = std::vector<std::vector<int32_t>>(n);
    for (int32_t j = 0; j < n; ++j) {
      ft[i][j].resize(n, 0);
    }
  }
}

void ProcessingRequests(std::vector<std::vector<std::vector<int32_t>>>& ft, const int32_t& n) {
  while (true) {
    int16_t command = 0;
    std::cin >> command;
    if (command == 1) {
      int32_t x = 0;
      int32_t y = 0;
      int32_t z = 0;
      int32_t delta = 0;
      std::cin >> x >> y >> z >> delta;
      ++x;
      ++y;
      ++z;
      Update(x, y, z, ft, delta, n);
    } else if (command == 2) {
      int32_t x1 = 0;
      int32_t y1 = 0;
      int32_t z1 = 0;
      int32_t x2 = 0;
      int32_t y2 = 0;
      int32_t z2 = 0;
      std::cin >> x1 >> y1 >> z1 >> x2 >> y2 >> z2;
      ++x1;
      ++y1;
      ++z1;
      ++x2;
      ++y2;
      ++z2;
      std::cout << QuerySubCube(x1, x2, y1, y2, z1, z2, ft) << "\n";
    } else if (command == 3) {
      return;
    }
  }
}

int main() {
  int32_t n = 0;
  std::cin >> n;
  n += 1;
  std::vector<std::vector<std::vector<int32_t>>> ft(n);
  BuildFenwickTree(n, ft);
  ProcessingRequests(ft, n);
  return 0;
}