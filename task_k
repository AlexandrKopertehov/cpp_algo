#include <iostream>
#include <set>

class Treap {
 private:
  struct Node {
    int64_t key;
    int64_t value;
    int64_t priority;
    int64_t size;
    Node* left;
    Node* right;
    Node* parent;
    int64_t result;

    explicit Node(int64_t key, int64_t value) : key(key), value(value), priority(std::rand()), size(1), left(nullptr), right(nullptr), parent(nullptr), result(value) {
    }
  };

  Node* root_ = nullptr;

  int64_t Size(Node* node) {
    return node ? node->size : 0;
  }

  int64_t Result(Node* node) {
    return node ? node->result : 0;
  }

  void FixNode(Node* node) {
    if (node) {
      node->size = 1 + Size(node->left) + Size(node->right);
      node->result = Result(node->left) + node->value + Result(node->right);
    }
  }

  Node* Merge(Node* t_1, Node* t_2) {
    if (!t_1) {
      return t_2;
    }
    if (!t_2) {
      return t_1;
    }
    if (t_1->priority < t_2->priority) {
      t_1->right = Merge(t_1->right, t_2);
      t_1->right->parent = t_1;
      FixNode(t_1);
      return t_1;
    }
    t_2->left = Merge(t_1, t_2->left);
    t_2->left->parent = t_2;
    FixNode(t_2);
    return t_2;
  }

  std::pair<Node*, Node*> Split(Node* t, const int64_t& key_0) {
    if (!t) {
      return std::make_pair(nullptr, nullptr);
    }
    if (t->key < key_0) {
      auto lr = Split(t->right, key_0);
      auto l = lr.first;
      auto r = lr.second;
      t->right = l;
      if (l) {
        l->parent = t;
      }
      if (r) {
        r->parent = nullptr;
      }
      FixNode(t);
      return std::make_pair(t, r);
    }
    auto lr = Split(t->left, key_0);
    auto l = lr.first;
    auto r = lr.second;
    t->left = r;
    if (r) {
      r->parent = t;
    }
    if (l) {
      l->parent = nullptr;
    }
    FixNode(t);
    return std::make_pair(l, t);
  }

  Node* Find(Node* x, int64_t key) {
    if (x == nullptr) {
      return x;
    }
    if (x->key == key) {
      return x;
    }
    if (x->key > key) {
      return Find(x->left, key);
    }
    return Find(x->right, key);
  }

  Node* Insert(Node* root, Node* node) {  // node->key not in treap
    auto p = Split(root, node->key);
    auto t_1 = p.first;
    auto t_2 = p.second;
    return Merge(Merge(t_1, node), t_2);
  }

  void ClearS(Node* x) {
    if (x != nullptr) {
      ClearS(x->left);
      ClearS(x->right);
      delete x;
    }
  }

 public:
  bool Exists(int64_t key) {
    Node* x = Find(root_, key);
    return x != nullptr && x->key == key;
  }

  void Insert(const int64_t& key, const int64_t& value) {
    if (!Exists(key)) {
      auto node = new Node(key, value);
      root_ = Insert(root_, node);
    }
  }

  int64_t Query(const int64_t& l, const int64_t& r) {
    auto p_1 = Split(root_, r + 1);
    auto p_2 = Split(p_1.first, l);
    auto result = Result(p_2.second);
    root_ = Merge(Merge(p_2.first, p_2.second), p_1.second);
    return result;
  }

  void Clear() {
    ClearS(root_);
  }
};

void ProcessingRequests(const int64_t& n, Treap& treap) {
  for (int64_t i = 0; i < n; ++i) {
    std::string command;
    std::cin >> command;
    if (command == "+") {
      int64_t x = 0;
      std::cin >> x;
      treap.Insert(x, x);
    } else if (command == "?") {
      int64_t l = 0;
      int64_t r = 0;
      std::cin >> l >> r;
      std::cout << treap.Query(l, r) << "\n";
    }
  }
}

int main() {
  int64_t n = 0;
  std::cin >> n;
  Treap treap;
  ProcessingRequests(n, treap);
  treap.Clear();
  return 0;
}